From 7e9e4a9a9af84a878c9c06c51897040d2484e912 Mon Sep 17 00:00:00 2001
From: Tejas Prajapati <prajapatitejas91@gmail.com>
Date: Fri, 27 May 2016 22:51:19 +0530
Subject: [PATCH] Code rearranged and ready to be compiled. Following changes
 are required to be done. - Complete the wrapper function for UART queries. -
 Add CRC function for communication using CC2500. - Add Channel selection
 logic - Add broadcast and unicast/ multicast logic. - Complete UART related
 code with use of wrapper function.

---
 .../Project/STM8S_StdPeriph_Template/eeprom.c      |   4 +-
 .../Project/STM8S_StdPeriph_Template/eeprom.h      |   7 +-
 .../STM8S_StdPeriph_Template/main_upwork_rb.c      | 118 +++++++++++++++++++--
 .../Project/STM8S_StdPeriph_Template/stm8s_it.c    |  34 ++++++
 4 files changed, 149 insertions(+), 14 deletions(-)

diff --git a/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/eeprom.c b/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/eeprom.c
index bf7ece4..939bc74 100644
--- a/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/eeprom.c
+++ b/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/eeprom.c
@@ -1,6 +1,6 @@
 #include "eeprom.h"
 
-extern uint8_t baud_rate_array[8],did_array[5],ch_no_array[4];
+extern char baud_rate_array[8],did_array[5],ch_no_array[4];
 
 void write_data_to_eeprom(char change_data)
 {
@@ -14,7 +14,7 @@ void write_data_to_eeprom(char change_data)
     {
       write_array_to_eeprom(baud_rate_addr,baud_rate_array);
       write_array_to_eeprom(did_addr,did_array);
-      write_array_to_eeprom(ch_no_addr,ch_no_array);
+      write_array_to_eeprom(ch_no_addr,cid_array);
     } 
     else if(change_data == 0)
     {
diff --git a/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/eeprom.h b/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/eeprom.h
index 55d45e1..74520d3 100644
--- a/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/eeprom.h
+++ b/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/eeprom.h
@@ -2,11 +2,14 @@
 
 #define EEPROM_H
 
+#include "stm8s.h"
 #include "stm8s_flash.h"
 
+extern char baud_rate_array[8],did_array[5],cid_array[4],rid_array[4],mode_array[2];
+
 #define baud_rate_addr  0x4000
-#define did_addr 0x400A
-#define ch_no_addr 0x401A
+#define did_addr        0x4010
+#define ch_no_addr      0x4020
 
 void write_array_to_eeprom(uint32_t, uint8_t*);
 void read_array_from_eeprom(uint32_t, uint8_t*);
diff --git a/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/main_upwork_rb.c b/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/main_upwork_rb.c
index 8abeffc..56f6069 100644
--- a/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/main_upwork_rb.c
+++ b/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/main_upwork_rb.c
@@ -6,25 +6,28 @@
 #include "uart.h"
 #include "eeprom.h"
 
+#define default 0
+//#define command_mode switch_position
+
 int baudrate, command_mode;
-uint8_t baud_rate_array[8],did_array[5],ch_no_array[4];
+char baud_rate_array[8],did_array[5],ch_no_array[4],cid_array[4],rid_array[4],mode_array[2];
 bool data_complete,exit_command_mode;
 char RF_send_buff[MAX_BUF_SIZE];
 char Uart_send_buff[MAX_BUF_SIZE];
+char uart_rcv_buff[MAX_BUF_SIZE];
 struct Comm_Parameters a;
-//enum Opeartion_Mode Op_mode;
 
 void clk_init(void);
 void Delay (uint16_t nCount);
+void handle_uart_request(char *);
+void check_for_parameter(char *, char); 
 void write_data_to_eeprom(bool);
 void Read_data_from_eeprom (void);
 void gpio_init(void);
 void spi_init(void);
 
-#define default 0
-#define change  1
-//#define command_mode switch_position
 
+int command_mode,change;
 
 int main (void)
 {
@@ -44,14 +47,15 @@ int main (void)
     {
       if(a.data_complete)
       {
+        handle_uart_request(uart_rcv_buff);
         write_data_to_eeprom(change);
         read_data_from_eeprom();
-        a.data_complete = 0;
-      }
-      else if(a.exit_command_mode)
-      {
-        break;
+        data_complete = 0;
       }
+//      else if(a.exit_command_mode)
+//      {
+//        break;
+//      }
     }
     if(a.data_received_from_RF)
     {
@@ -113,6 +117,100 @@ void spi_init(void)
   GPIO_Init(GPIOC,GPIO_PIN_4, GPIO_MODE_OUT_PP_HIGH_FAST);                      /*CS*/
 }
 
+void handle_uart_request(char * uart_req)
+{
+  char *ptr = NULL, edit = 0;
+  
+//  check_for_parameter(uart_req);
+  
+  ptr = strstr(uart_req,"=");
+  if(ptr != NULL)
+  {
+    edit = 1;
+    check_for_parameter(uart_req , edit);
+  }
+  else
+  {
+     ptr = strstr(uart_req,"?");
+     if(ptr != NULL)
+     {
+        check_for_parameter(uart_req , edit);
+     }
+       else
+        {
+          ptr = strstr(uart_req,"RST");
+          if(ptr != NULL)
+          {
+            change = default;
+          }
+        }
+  }
+              
+}
+
+void check_for_parameter(char * parameter , char edit)                          //BR,CID,DID,RID,MODE,RST
+{
+    if(strncmp(parameter,"AT+BR",5) == 0)                                       /*Baudrate*/
+    { 
+      if(edit)
+      {
+        strcpy(baud_rate_array,parameter + 6);
+        change = 1;
+      }
+      else
+      {
+        send_data_uart(baud_rate_array);
+      }
+    }
+    else if(strncmp(parameter,"AT+CID",6)==0)                                   /*Channel ID*/
+    {
+      if(edit)
+      {
+        strcpy(cid_array,parameter + 7);
+        change = 1;
+      }
+      else
+      {
+        send_data_uart(cid_array);
+      }
+    }
+    else if(strncmp(parameter,"AT+DID",6)==0)                                   /*Device ID*/
+    {
+      if(edit)
+      {
+        strcpy(did_array,parameter + 7);
+        change = 1;
+      }
+      else
+      {
+        send_data_uart(did_array);
+      }
+    }
+    else if(strncmp(parameter,"AT+RID",6)==0)                                   /*Remote ID*/
+    {
+      if(edit)
+      {
+        strcpy(rid_array,parameter + 7);
+        change = 1;
+      }
+      else
+      {
+        send_data_uart(rid_array);
+      }
+    } 
+    else if(strncmp(parameter,"AT+MODE",7)==0)
+    {
+      if(edit)
+      {
+        strcpy(mode_array,parameter + 8);
+        change = 1;
+      }
+      else
+      {
+        send_data_uart(mode_array);
+      }
+    } 
+}
 
 #ifdef USE_FULL_ASSERT
 
diff --git a/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/stm8s_it.c b/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/stm8s_it.c
index cdbf9bf..b104a01 100644
--- a/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/stm8s_it.c
+++ b/CC2500_Wireless_UART_Link/STM8S_StdPeriph_Lib/Project/STM8S_StdPeriph_Template/stm8s_it.c
@@ -31,6 +31,8 @@
 #include "rad.h"
     
 extern struct Comm_Parameters a;
+extern int command_mode;
+extern char uart_rcv_buff[50];
 
 /* Private typedef -----------------------------------------------------------*/
 /* Private define ------------------------------------------------------------*/
@@ -394,6 +396,38 @@ INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
     /* In order to detect unexpected events during development,
        it is recommended to set a breakpoint on the following instruction.
     */
+  static char index = 0;
+  uint8_t temp;
+  
+  /* Read one byte from the receive data register and send it back */
+  temp = (UART1_ReceiveData8() & 0x7F);
+  if(temp == '\n')
+  {
+    uart_rcv_buff[index] = 0x00;
+    index = 0;
+    if(command_mode)
+    {
+//      if(strncmp(uart_rcv_buff,"EXIT",4)==0)
+//      {
+//        a.exit_command_mode = 1;
+//      }
+      if(strncmp(uart_rcv_buff,"AT",2)==0)
+      {
+        a.data_complete = 1;
+      }
+    }
+    else
+    {
+      a.data_received_from_UART = 1;
+    }
+  }
+  else
+  {
+    if(index<=255)
+    {
+      uart_rcv_buff[index++] = temp;
+    }
+  }
 }
 #endif /*STM8S105*/
 
-- 
2.6.3.windows.1

